var tipuesearch = {"pages": [
     {"title": "mi.lcl.application.client", "text": "   ", "tags": "", "url": "mi.lcl.application.client.html"},
     {"title": "mi.lcl.application.client.Tmi_lcl_application_client", "text": "   ", "tags": "", "url": "mi.lcl.application.client.Tmi_lcl_application_client.html"},
     {"title": "mi.lcl.application.client.Tmi_lcl_application_client.GetTypeApplication", "text": "    ", "tags": "", "url": "mi.lcl.application.client.Tmi_lcl_application_client.html#GetTypeApplication"},
     {"title": "mi.lcl.application.client.Tmi_lcl_application_client.Create", "text": "    ", "tags": "", "url": "mi.lcl.application.client.Tmi_lcl_application_client.html#Create"},
     {"title": "mi.lcl.application.client.Application", "text": "    ", "tags": "", "url": "mi.lcl.application.client.html#Application"},
     {"title": "mi.lcl.application.client.mi_lcl_application_client", "text": "    ", "tags": "", "url": "mi.lcl.application.client.html#mi_lcl_application_client"},
     {"title": "mi.lcl.application.client.SetRequireDerivedFormResource", "text": "    ", "tags": "", "url": "mi.lcl.application.client.html#SetRequireDerivedFormResource"},
     {"title": "mi.web.dmxscroller.form.rest.client", "text": "A unit mi.web.dmxscroller.form.rest.client implementa a classe TDmxScroller_Form_Rest_Client.       Primeiro autor: Paulo Sérgio da Silva Pacheco paulosspacheco@yahoo.com.br)   VERSÃO      Alpha - 1.0.0      CÓDIGO FONTE:      mi_web_dmxscroller_form_rest_client.pas      HISTÓRICO:      30/08/2024 a 14/09/2024      Criado essa unit   Criado versãoo 1.0.0         PENDÊNCIAS      T12 Criar métodos:      EnterField   ExitField   CalcFields   ChangeField         CONCLUÍDO      DoOnNewRecord   AddRec   Locate   PutRec   DeleteRec   Navigator   FirstRec   NextRec   PrevRec   LastRec         ", "tags": "", "url": "mi.web.dmxscroller.form.rest.client.html"},
     {"title": "mi.web.dmxscroller.form.rest.client.TDmxScroller_Form_Rest_Client", "text": "A class TDmxScroller_Form_Rest_Client é uma extensão da classe TDmxScroller_Form, projetada para integrar operações de requisições HTTP em um formulário usando um cliente REST (TMi_FpHttpClient). Esta classe facilita a manipulação de registros remotos por meio de uma API REST, permitindo operações CRUD e navegação entre os registros de forma eficiente.   ", "tags": "", "url": "mi.web.dmxscroller.form.rest.client.TDmxScroller_Form_Rest_Client.html"},
     {"title": "mi.web.dmxscroller.form.rest.client.TDmxScroller_Form_Rest_Client.Create", "text": "    ", "tags": "", "url": "mi.web.dmxscroller.form.rest.client.TDmxScroller_Form_Rest_Client.html#Create"},
     {"title": "mi.web.dmxscroller.form.rest.client.TDmxScroller_Form_Rest_Client.Destroy", "text": "    ", "tags": "", "url": "mi.web.dmxscroller.form.rest.client.TDmxScroller_Form_Rest_Client.html#Destroy"},
     {"title": "mi.web.dmxscroller.form.rest.client.TDmxScroller_Form_Rest_Client.DoOnNewRecord", "text": "O método DoOnNewRecord é responsável por criar um novo registro através de uma requisição HTTP GET, utilizando o cliente Mi_FpHttpClient. Caso a requisição seja bem-sucedida, o novo registro é processado e atribuído ao formulário para edição.       Fluxo de Execução      Envia uma requisição HTTP do tipo GET com o comando CmNewRecord.   Se a resposta for recebida (Response for atribuído), chama o método herdado DoOnNewRecord e armazena a resposta em JSONObject.   Libera a memória de Response no final, se alocado.      Parâmetros Locais      Response: TJSONObject: -Objeto JSON que contém a resposta da requisição HTTP.   Exceções      Caso o envio da requisição ou o processamento do JSON falhe, uma exceção pode ser levantada pelo método SendRequest ou pela manipulação de objetos.      Ver Também      Mi_FpHttpClient.SendRequest   inherited DoOnNewRecord      Exemplo de uso      var   RestClient: TDmxScroller_Form_Rest_Client; begin   // Inicializando o cliente REST   RestClient := TDmxScroller_Form_Rest_Client.Create(nil);   try     // Chama o método para criar um novo registro     RestClient.DoOnNewRecord;      // Agora o JSON com o novo registro estará disponível para edição     // Processar o JSONObject conforme necessário     if Assigned(RestClient.JSONObject) then       ShowMessage('Novo registro criado com sucesso.');    finally     RestClient.Free;   end; end;            ", "tags": "", "url": "mi.web.dmxscroller.form.rest.client.TDmxScroller_Form_Rest_Client.html#DoOnNewRecord"},
     {"title": "mi.web.dmxscroller.form.rest.client.TDmxScroller_Form_Rest_Client.AddRec", "text": "O método AddRec adiciona o buffer DataSource.dataSet no arquivo.       Descrição      O método AddRec tem a função de adicionar um novo registro à base de dados remota, utilizando a funcionalidade REST do cliente HTTP. Se um registro estiver selecionado e o estado for de adição (Appending), ele envia os dados do registro para o servidor via requisição HTTP POST. Após a confirmação da resposta, o método atualiza a chave primária do registro e realiza uma busca pelo novo registro, utilizando as chaves atualizadas.      Parâmetros Locais      Params: TJSONObject      Objeto JSON contendo os parâmetros da requisição.      KeyFields: string      Campos-chave do registro.      KeyValues: Variant      Valores dos campos-chave.      Response: TJSONObject      Objeto JSON contendo a resposta da requisição HTTP.         Fluxo de Execução      Verifica se há um registro selecionado com RecordSelected.   Caso o registro esteja sendo adicionado (Appending), realiza a adição chamando Inherited AddRec.   Envia a requisição HTTP POST para o servidor com a ação CmUpdateRecord e os dados do registro.   Se a resposta tiver um código diferente de 200 ou 201, o método falha e chama DoOnNewRecord.   Ao finalizar, verifica se houve uma resposta do servidor e processa os campos-chave atualizados, chamando ParseServerResponse.   Caso o registro seja adicionado com sucesso, gera os parâmetros de busca e envia a requisição HTTP GET para localizar o registro recém-adicionado.   O resultado da busca é armazenado em JSONObject e a atualização do registro é concluída com Inherited PutRec.      Exceções      TException: Lançada caso nenhum registro tenha sido selecionado.      Ver Também      Mi_FpHttpClient.SendRequest: Método utilizado para enviar requisições HTTP.   ParseServerResponse: Método responsável por processar a resposta do servidor e atualizar os campos-chave.   Inherited AddRec: Método herdado responsável por adicionar um registro localmente.   Inherited UpdateRec: Método herdado responsável por atualizar um registro localmente.          ", "tags": "", "url": "mi.web.dmxscroller.form.rest.client.TDmxScroller_Form_Rest_Client.html#AddRec"},
     {"title": "mi.web.dmxscroller.form.rest.client.TDmxScroller_Form_Rest_Client.Locate", "text": "O método Locate Localiza o registro no servidor e adicone no BufDataSet local caso exista.       Descrição      O método Locate tenta localizar um registro com base nos parâmetros fornecidos. Ele envia uma requisição HTTP usando a função Mi_FpHttpClient.SendRequest e manipula a resposta JSON para localizar ou criar um novo registro.      Parâmetros      KeyFields: string Nome(s) do(s) campo(s) utilizado(s) para localizar o registro.   KeyValues: Variant      Valor(es) correspondente(s) ao(s) campo(s) especificado(s) em KeyFields.      Options: TLocateOptions      Conjunto de opções de localização (exemplo: loCaseInsensitive, loPartialKey).         Retorno      boolean:      true      Se o registro for localizado ou criado com sucesso.      false      Em caso de erro ou se o registro não for encontrado.            Exceções      O método trata exceções internamente e retorna false em caso de falha.      Detalhes de Implementação      Converte os parâmetros KeyFields, KeyValues e Options para um JSON utilizando o método LocateParamsToJson.   Envia uma requisição HTTP do tipo GET para localizar o registro correspondente, utilizando o endpoint 'Cmlocate'.   Se a resposta HTTP contém dados:      O método tenta localizar o registro chamando o método inherited Locate.   Se o registro for localizado, a resposta JSON é atribuída à propriedade JSONObject.   Caso o registro não seja localizado, o método chama inherited DoOnNewRecord e atribui o JSON da resposta ao JSONObject, permitindo a criação de um novo registro.      Atualiza o registro chamando inherited UpdateRec.   Libera os objetos Params e Response para evitar vazamento de memória.      Exemplo de Uso     procedure teste;   var     Found: boolean; begin   Found := MyDmxScrollerFormRestClient.Locate('ID', 123, []);   if Found   then ShowMessage('Registro localizado com sucesso!')   else ShowMessage('Registro não encontrado.'); end;         ", "tags": "", "url": "mi.web.dmxscroller.form.rest.client.TDmxScroller_Form_Rest_Client.html#Locate"},
     {"title": "mi.web.dmxscroller.form.rest.client.TDmxScroller_Form_Rest_Client.PutRec", "text": "O método PutRec tem a função de atualizar um registro existente na base de dados remota usando uma requisição HTTP PUT. Caso o registro esteja selecionado, ele utiliza as chaves do registro para localizar e atualizar o registro no servidor. Se as chaves não estiverem disponíveis, o processo de atualização é interrompido e uma exceção é lançada.       Parâmetros Locais      Response: TJSONObject      Armazena a resposta da requisição HTTP.      Params: TJSONObject      Contém os parâmetros para localizar o registro no servidor.      wJSONObject: TJSONObject      Armazena uma cópia do objeto JSON atual.      KeyFields: string      Campos-chave utilizados para identificar o registro.      KeyValues: Variant      Valores dos campos-chave do registro.         Fluxo de Execução      Verifica se um registro foi selecionado com RecordSelected.   Se o registro estiver selecionado, chama Inherited PutRec para realizar a atualização local.   Obtém os campos-chave do registro através do método getFieldsKeys.   Se as chaves estiverem presentes, monta os parâmetros de localização com LocateParamsToJson e envia uma requisição HTTP PUT com a ação CmUpdateRecord.   Verifica o código de status da resposta. Se não for 200, restaura o valor original de JSONObject e interrompe a operação.   Se não houver campos-chave, uma exceção é lançada informando que não é possível atualizar o registro no servidor sem chaves de pesquisa.   Caso nenhum registro tenha sido selecionado, lança uma exceção informando que o registro não foi selecionado.      Exceções      TException:      Lançada nos seguintes cenários:      Se não houver registro selecionado.   Se não houver campos-chave disponíveis para realizar a atualização no servidor.            Ver Também      Mi_FpHttpClient.SendRequest: Método utilizado para enviar requisições HTTP.   LocateParamsToJson: Método responsável por criar os parâmetros de localização do registro.   Inherited PutRec: Método herdado responsável por atualizar o registro localmente.          ", "tags": "", "url": "mi.web.dmxscroller.form.rest.client.TDmxScroller_Form_Rest_Client.html#PutRec"},
     {"title": "mi.web.dmxscroller.form.rest.client.TDmxScroller_Form_Rest_Client.DeleteRec", "text": "O método DeleteRec tem como objetivo excluir um registro da base de dados remota através de uma requisição HTTP. Ele identifica o registro a ser excluído com base em suas chaves primárias, monta os parâmetros da requisição e envia uma operação HTTP DELETE ao servidor. Se não houver um registro selecionado ou se as chaves não estiverem disponíveis, o método gera uma exceção.       Parâmetros Locais      Response: TJSONObject      Objeto que armazena a resposta da requisição HTTP.      Params: TJSONObject      Objeto JSON contendo os parâmetros para localizar o registro a ser excluído.      KeyFields: string      Campos-chave do registro.      KeyValues: Variant      Valores dos campos-chave do registro.         Fluxo de Execução      Verifica se existe um registro selecionado usando RecordSelected.   Obtém os campos-chave do registro com o método getFieldsKeys.   Se as chaves forem encontradas, monta os parâmetros da requisição com LocateParamsToJson e envia uma solicitação HTTP PUT com a ação CmDeleteRecord.   Verifica o código de resposta do servidor:      Sucesso se o código for 200 (OK) ou 204 (No Content).   Se o código for diferente, o método define Result como False.      Se não houver campos-chave disponíveis, o método lança uma exceção, impedindo a exclusão do registro no servidor.   Caso nenhum registro tenha sido selecionado, uma exceção é lançada informando que não há registro selecionado para exclusão.      Exceções      TException: Lançada nas seguintes situações:      Se nenhum registro estiver selecionado.   Se os campos-chave não estiverem disponíveis, impedindo a exclusão do registro no servidor.         Ver Também      Mi_FpHttpClient.SendRequest: Método responsável por enviar a requisição HTTP para excluir o registro.   LocateParamsToJson: Método que cria os parâmetros para localizar o registro no servidor.   getFieldsKeys: Método que obtém os campos-chave de um registro.          ", "tags": "", "url": "mi.web.dmxscroller.form.rest.client.TDmxScroller_Form_Rest_Client.html#DeleteRec"},
     {"title": "mi.web.dmxscroller.form.rest.client.TDmxScroller_Form_Rest_Client.FirstRec", "text": "    ", "tags": "", "url": "mi.web.dmxscroller.form.rest.client.TDmxScroller_Form_Rest_Client.html#FirstRec"},
     {"title": "mi.web.dmxscroller.form.rest.client.TDmxScroller_Form_Rest_Client.NextRec", "text": "    ", "tags": "", "url": "mi.web.dmxscroller.form.rest.client.TDmxScroller_Form_Rest_Client.html#NextRec"},
     {"title": "mi.web.dmxscroller.form.rest.client.TDmxScroller_Form_Rest_Client.PrevRec", "text": "    ", "tags": "", "url": "mi.web.dmxscroller.form.rest.client.TDmxScroller_Form_Rest_Client.html#PrevRec"},
     {"title": "mi.web.dmxscroller.form.rest.client.TDmxScroller_Form_Rest_Client.LastRec", "text": "    ", "tags": "", "url": "mi.web.dmxscroller.form.rest.client.TDmxScroller_Form_Rest_Client.html#LastRec"},
     {"title": "mi.web.dmxscroller.form.rest.client.TDmxScroller_Form_Rest_Client.EventRequest_pDmxFieldRec", "text": "    ", "tags": "", "url": "mi.web.dmxscroller.form.rest.client.TDmxScroller_Form_Rest_Client.html#EventRequest_pDmxFieldRec"},
     {"title": "mi.web.dmxscroller.form.rest.client.TDmxScroller_Form_Rest_Client.DoOnEnterField", "text": "    ", "tags": "", "url": "mi.web.dmxscroller.form.rest.client.TDmxScroller_Form_Rest_Client.html#DoOnEnterField"},
     {"title": "mi.web.dmxscroller.form.rest.client.TDmxScroller_Form_Rest_Client.DoOnExitField", "text": "    ", "tags": "", "url": "mi.web.dmxscroller.form.rest.client.TDmxScroller_Form_Rest_Client.html#DoOnExitField"},
     {"title": "mi.web.dmxscroller.form.rest.client.TDmxScroller_Form_Rest_Client.Mi_FpHttpClient", "text": "A propiedade Mi_FpHttpClient usanda para fazer requisições http ao servidor       EXEMPLO           ", "tags": "", "url": "mi.web.dmxscroller.form.rest.client.TDmxScroller_Form_Rest_Client.html#Mi_FpHttpClient"},
     {"title": "mi.web.dmxscroller.form.rest.client.Register", "text": "    ", "tags": "", "url": "mi.web.dmxscroller.form.rest.client.html#Register"},
     {"title": "mi.web.dmxscroller.form.rest.client.TEnumNavigator", "text": "A tipo enumerado TEnumNavigator é usado como parâmetro para criação de resquisições http no métodos Mi_FpHttpClient.SendRequest().    EnGoBof    EnNextRecord    EnPrevRecord    EnGoEof   ", "tags": "", "url": "mi.web.dmxscroller.form.rest.client.html#TEnumNavigator"},
     {"title": "mi.web.form", "text": "   ", "tags": "", "url": "mi.web.form.html"},
     {"title": "mi.web.fphttpserver", "text": "A unit name implemta a classe THTTPServerThread.   ", "tags": "", "url": "mi.web.fphttpserver.html"},
     {"title": "mi.web.fphttpserver.THTTPServerThread", "text": "A class THTTPServerThread Executa uma aplicação http dentro de um processo separado para que o processo corrente não trave.       O motivo que me levou a criar essa classe é que os exemplos fcl-web são todos modo console.      ", "tags": "", "url": "mi.web.fphttpserver.THTTPServerThread.html"},
     {"title": "mi.web.fphttpserver.THTTPServerThread.Execute", "text": "O método Execute executa a tarefa.    ", "tags": "", "url": "mi.web.fphttpserver.THTTPServerThread.html#Execute"},
     {"title": "mi.web.fphttpserver.THTTPServerThread.Create", "text": "O constructor Create inicializa os atributos e propriedades da aplicação standealone.       PARÂMETROS      aHostName      endereço ip do servidor ou URL:      Exemplo:      http://localhost            aPort      Porta de scuta do servidor:      Exemplo:      8080            aAllowDefaultModule      Quando AllowDefaultModule está definido como True:      O framework fphttpapp permite que o módulo padrão, que foi registrado na aplicação (geralmente o primeiro módulo criado), seja usado para processar requisições que não têm um módulo específico associado. Isso é útil em cenários simples, onde você pode ter apenas um módulo e deseja que ele lide com todas as requisições sem a necessidade de configurar rotas detalhadas.                ", "tags": "", "url": "mi.web.fphttpserver.THTTPServerThread.html#Create"},
     {"title": "mi.web.fphttpserver.THTTPServerThread.Create", "text": "O constructor Create inicializa os atributos e propriedades da aplicação CGI.       PARÂMETROS      aAllowDefaultModule      Quando AllowDefaultModule está definido como True:      O framework fphttpapp permite que o módulo padrão, que foi registrado na aplicação (geralmente o primeiro módulo criado), seja usado para processar requisições que não têm um módulo específico associado. Isso é útil em cenários simples, onde você pode ter apenas um módulo e deseja que ele lide com todas as requisições sem a necessidade de configurar rotas detalhadas.                ", "tags": "", "url": "mi.web.fphttpserver.THTTPServerThread.html#Create"},
     {"title": "mi.web.fphttpserver.THTTPServerThread.Create", "text": "O constructor Create inicializa os atributos e propriedades da aplicação fastcgi.       PARÂMETROS      aPort      Porta de scuta do servidor:      Exemplo:      8080            aAllowDefaultModule      Quando AllowDefaultModule está definido como True:      O framework fphttpapp permite que o módulo padrão, que foi registrado na aplicação (geralmente o primeiro módulo criado), seja usado para processar requisições que não têm um módulo específico associado. Isso é útil em cenários simples, onde você pode ter apenas um módulo e deseja que ele lide com todas as requisições sem a necessidade de configurar rotas detalhadas.                ", "tags": "", "url": "mi.web.fphttpserver.THTTPServerThread.html#Create"},
     {"title": "mi.web.fphttpserver.THTTPServerThread.StopServer", "text": "O método StopServer para a execução da tarefa.    ", "tags": "", "url": "mi.web.fphttpserver.THTTPServerThread.html#StopServer"},
     {"title": "mi.web.fphttpserver.TMi_FpHttpServer", "text": "A classe TMi_FpHttpServer foi criada com propósito de ser registrada na palleta de componentes para ser inserida em um Tform na criação de aplicações hibridas, ou seja LCL e web .   ", "tags": "", "url": "mi.web.fphttpserver.TMi_FpHttpServer.html"},
     {"title": "mi.web.fphttpserver.TMi_FpHttpServer.LoadMimeTypes", "text": "O método LoadMimeTypes carrega o arquivo com os tipos mime    ", "tags": "", "url": "mi.web.fphttpserver.TMi_FpHttpServer.html#LoadMimeTypes"},
     {"title": "mi.web.fphttpserver.TMi_FpHttpServer.Create", "text": "A constructor Create inicia a classe fphttpapp.Application se a diretiva DEFINE STANDALONE estiver definida, ou inicia a classe fpfcgi.Application, se a diretiva DEFINE FPFCGI estiver definida, ou inicia a classe fpcgi.Application, se a diretiva DEFINE FPCGI estiver defiidida.       NOTA      As diretivas STANDALONE, FPFCGI e FPCGI são multuamente exclisivas, ou seja: ao definir uma as outras precisão estar indefiniddas.          ", "tags": "", "url": "mi.web.fphttpserver.TMi_FpHttpServer.html#Create"},
     {"title": "mi.web.fphttpserver.TMi_FpHttpServer.Start", "text": "O método name inicia o servidor em uma tarefa separada da atual.    ", "tags": "", "url": "mi.web.fphttpserver.TMi_FpHttpServer.html#Start"},
     {"title": "mi.web.fphttpserver.TMi_FpHttpServer.Stop", "text": "O método name para o servidor de uma tarefa separada da atual.    ", "tags": "", "url": "mi.web.fphttpserver.TMi_FpHttpServer.html#Stop"},
     {"title": "mi.web.fphttpserver.TMi_FpHttpServer.HTTPServerThread", "text": "A propiedade HTTPServerThread criar uma aplicação web em uma tarefa a parte com propósto da mesma ser executada em conjunto com outro tipo de aplicação do freeepascal.   ", "tags": "", "url": "mi.web.fphttpserver.TMi_FpHttpServer.html#HTTPServerThread"},
     {"title": "mi.web.fphttpserver.TMi_FpHttpServer.MimeFile", "text": "   ", "tags": "", "url": "mi.web.fphttpserver.TMi_FpHttpServer.html#MimeFile"},
     {"title": "mi.web.fphttpserver.TMi_FpHttpServer.BaseDir", "text": "   ", "tags": "", "url": "mi.web.fphttpserver.TMi_FpHttpServer.html#BaseDir"},
     {"title": "mi.web.fphttpserver.TMi_FpHttpServer.Port", "text": "A propiedade Port guarda a porta onde a aplicação irá executar.   ", "tags": "", "url": "mi.web.fphttpserver.TMi_FpHttpServer.html#Port"},
     {"title": "mi.web.fphttpserver.TMi_FpHttpServer.UseSSL", "text": "A propiedade UseSSL unforma se a aplicação deve usar o protocolo SSL, ou seja https.       NOTAS      A porta padrão do https é 443, caso seja uma porta diferente a mesma precisa ser referenciada na url cliente no browser.         ", "tags": "", "url": "mi.web.fphttpserver.TMi_FpHttpServer.html#UseSSL"},
     {"title": "mi.web.fphttpserver.TMi_FpHttpServer.HostName", "text": "A propriedade name usada para definir a utl do servior ou número do ip.   ", "tags": "", "url": "mi.web.fphttpserver.TMi_FpHttpServer.html#HostName"},
     {"title": "mi.web.fphttpserver.TMi_FpHttpServer.AllowDefaultModule", "text": "A propriedade name é usada no contexto de um servidor HTTP no FCL-Web para controlar se o módulo padrão do servidor deve ser utilizado quando nenhum módulo específico é identificado para processar uma requisição.       PARÂMETROS      true      Se o servidor não encontrar um módulo específico que corresponda à requisição, ele permitirá que o módulo padrão seja usado para processar essa requisição.   Isso é útil para garantir que mesmo requisições não correspondentes a módulos específicos sejam tratadas de forma genérica, evitando erros de &quot;404 Not Found&quot; ou outras falhas.      false      O servidor não usará o módulo padrão para processar requisições que não correspondem a nenhum módulo específico.   Nesse caso, se nenhuma correspondência for encontrada, a requisição pode falhar, resultando em uma resposta de erro para o cliente.            ", "tags": "", "url": "mi.web.fphttpserver.TMi_FpHttpServer.html#AllowDefaultModule"},
     {"title": "mi.web.fphttpserver.TMi_FpHttpServer.Active", "text": "A propriedade Active executa o método start se a propriedade for true e executa o método stop se a propriedade for false.   ", "tags": "", "url": "mi.web.fphttpserver.TMi_FpHttpServer.html#Active"},
     {"title": "mi.web.fphttpserver.Mimetypes_default", "text": "   ", "tags": "", "url": "mi.web.fphttpserver.html#Mimetypes_default"},
     {"title": "mi.web.fphttpserver.HostName_default", "text": "   ", "tags": "", "url": "mi.web.fphttpserver.html#HostName_default"},
     {"title": "mi.web.fphttpserver.Port_default", "text": "   ", "tags": "", "url": "mi.web.fphttpserver.html#Port_default"},
     {"title": "mi.web.fphttpserver.Register", "text": "    ", "tags": "", "url": "mi.web.fphttpserver.html#Register"},
     {"title": "mi.web.fphttpserver.BaseURL", "text": "A varável publica name é iniciada com os parâmetros passados para a tarefa.   ", "tags": "", "url": "mi.web.fphttpserver.html#BaseURL"},
     {"title": "Mi_WebRestApi", "text": "   ", "tags": "", "url": "Mi_WebRestApi.html"},
     {"title": "Mi_WebRestApi.TMi_WebRestApi", "text": "   ", "tags": "", "url": "Mi_WebRestApi.TMi_WebRestApi.html"},
     {"title": "Mi_WebRestApi.Register", "text": "    ", "tags": "", "url": "Mi_WebRestApi.html#Register"}
]};
