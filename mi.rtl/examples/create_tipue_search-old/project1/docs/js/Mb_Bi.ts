/** 
//====================================================================================
{$REGION '---> Mapa de Bits usados para teste de Bits de uma variável.'}
//====================================================================================
*/

/** 
  {
    Os Bits de variável são setados com operador OR ou + e testados
    com operador AND.

    Exemplo:
      variável State de uma tabela.
        Bit00 = 0 = Arquivo fechado; 1 = Arquivo aberto
        Bit01 = 0 = Compartilhado ;  1 = Nao compartilhado

    HABILITANDO BITS
      Setar State para fechado                     : State := Bit00;
      Setar State para Aberto                      : State := Bit00 + 1;
      Setar State aberto e para Nao compartilhado  : State := Bit00 + 1+
                                                              Bit01 ;

    DESABILITANDO BITS
      Setar State para Fechado            : State := State - 1;
      Setar State para compartilhado      : State := State - Bit01;

    TESTANDO SE UM BITS ESTA HABILITADO
      Teste se a tabela esta compartilhada: (State And Bit01) <> 0
      Arquivo aberto e nao compartilhado:   (
                                             (State And Bit00) <> 0 and
                                             (State And Bit01) <> 0
                                            )
    TESTANDO SE UM BIT ESTA DESABILITADO
      Testa se a tabela nao compartilhada  (State And Bit01) = 0
      Testa se o arquivo esta fechado:     (State And Bit00) = 0
  }
*/  
const 
  //         32 BITS
  //         HEX              FEDCBA9876543210FEDCBA9876543210FEDCBA9876543210FEDCBA9876543210}
  Mb_Bit00 = 0x0001,        //0000000000000000000000000000000000000000000000000000000000000001  0
  Mb_Bit01 = 0x0002,        //0000000000000000000000000000000000000000000000000000000000000010  1
  Mb_Bit02 = 0x0004,        //0000000000000000000000000000000000000000000000000000000000000100  2
  Mb_Bit03 = 0x0008,        //0000000000000000000000000000000000000000000000000000000000001000  3
  Mb_Bit04 = 0x0010,        //0000000000000000000000000000000000000000000000000000000000010000  4
  Mb_Bit05 = 0x0020,        //0000000000000000000000000000000000000000000000000000000000100000  5
  Mb_Bit06 = 0x0040,        //0000000000000000000000000000000000000000000000000000000001000000  6
  Mb_Bit07 = 0x0080,        //0000000000000000000000000000000000000000000000000000000010000000  7
  Mb_Bit08 = 0x0100,        //0000000000000000000000000000000000000000000000000000000100000000  8
  Mb_Bit09 = 0x0200,        //0000000000000000000000000000000000000000000000000000001000000000  9
  Mb_Bit10 = 0x0400,        //0000000000000000000000000000000000000000000000000000010000000000  A
  Mb_Bit11 = 0x0800,        //0000000000000000000000000000000000000000000000000000100000000000  B
  Mb_Bit12 = 0x1000,        //0000000000000000000000000000000000000000000000000001000000000000  C
  Mb_Bit13 = 0x2000,        //0000000000000000000000000000000000000000000000000010000000000000  D
  Mb_Bit14 = 0x4000,        //0000000000000000000000000000000000000000000000000100000000000000  E
  Mb_Bit15 = 0x8000,        //0000000000000000000000000000000000000000000000001000000000000000  F
  Mb_Bit16 = 0x10000,       //0000000000000000000000000000000000000000000000010000000000000000  0
  Mb_Bit17 = 0x20000,       //0000000000000000000000000000000000000000000000100000000000000000  1
  Mb_Bit18 = 0x40000,       //0000000000000000000000000000000000000000000001000000000000000000  2
  Mb_Bit19 = 0x80000,       //0000000000000000000000000000000000000000000010000000000000000000  3
  Mb_Bit20 = 0x100000,      //0000000000000000000000000000000000000000000100000000000000000000  4
  Mb_Bit21 = 0x200000,      //0000000000000000000000000000000000000000001000000000000000000000  5
  Mb_Bit22 = 0x400000,      //0000000000000000000000000000000000000000010000000000000000000000  6
  Mb_Bit23 = 0x800000,      //0000000000000000000000000000000000000000100000000000000000000000  7
  Mb_Bit24 = 0x1000000,     //0000000000000000000000000000000000000001000000000000000000000000  8
  Mb_Bit25 = 0x2000000,     //0000000000000000000000000000000000000010000000000000000000000000  9
  Mb_Bit26 = 0x4000000,     //0000000000000000000000000000000000000100000000000000000000000000  A
  Mb_Bit27 = 0x8000000,     //0000000000000000000000000000000000001000000000000000000000000000  B
  Mb_Bit28 = 0x10000000,    //0000000000000000000000000000000000010000000000000000000000000000  C
  Mb_Bit29 = 0x20000000,    //0000000000000000000000000000000000100000000000000000000000000000  D
  Mb_Bit30 = 0x40000000,    //0000000000000000000000000000000001000000000000000000000000000000  E
  Mb_Bit31 = 0x80000000,    //0000000000000000000000000000000010000000000000000000000000000000  F
  Mb_Bit32 = 0x100000000;   //0000000000000000000000000000000100000000000000000000000000000000  0
